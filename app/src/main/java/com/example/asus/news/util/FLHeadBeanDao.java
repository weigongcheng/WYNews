package com.example.asus.news.util;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.asus.news.live.model.FLHeadBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FLHEAD_BEAN".
*/
public class FLHeadBeanDao extends AbstractDao<FLHeadBean, Void> {

    public static final String TABLENAME = "FLHEAD_BEAN";

    /**
     * Properties of entity FLHeadBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Order = new Property(0, int.class, "order", false, "ORDER");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Visible = new Property(4, boolean.class, "visible", false, "VISIBLE");
    }


    public FLHeadBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FLHeadBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FLHEAD_BEAN\" (" + //
                "\"ORDER\" INTEGER NOT NULL ," + // 0: order
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"TYPE\" TEXT," + // 2: type
                "\"NAME\" TEXT," + // 3: name
                "\"VISIBLE\" INTEGER NOT NULL );"); // 4: visible
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FLHEAD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FLHeadBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getOrder());
        stmt.bindLong(2, entity.getId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getVisible() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FLHeadBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getOrder());
        stmt.bindLong(2, entity.getId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getVisible() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FLHeadBean readEntity(Cursor cursor, int offset) {
        FLHeadBean entity = new FLHeadBean( //
            cursor.getInt(offset + 0), // order
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getShort(offset + 4) != 0 // visible
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FLHeadBean entity, int offset) {
        entity.setOrder(cursor.getInt(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVisible(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FLHeadBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FLHeadBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(FLHeadBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
