package com.example.asus.news.util;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.asus.news.live.model.FutureBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FUTURE_BEAN".
*/
public class FutureBeanDao extends AbstractDao<FutureBean, Void> {

    public static final String TABLENAME = "FUTURE_BEAN";

    /**
     * Properties of entity FutureBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StartTime = new Property(0, String.class, "startTime", false, "START_TIME");
        public final static Property Image = new Property(1, String.class, "image", false, "IMAGE");
        public final static Property RoomId = new Property(2, int.class, "roomId", false, "ROOM_ID");
        public final static Property RoomName = new Property(3, String.class, "roomName", false, "ROOM_NAME");
    }


    public FutureBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FutureBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FUTURE_BEAN\" (" + //
                "\"START_TIME\" TEXT," + // 0: startTime
                "\"IMAGE\" TEXT," + // 1: image
                "\"ROOM_ID\" INTEGER NOT NULL ," + // 2: roomId
                "\"ROOM_NAME\" TEXT);"); // 3: roomName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FUTURE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FutureBean entity) {
        stmt.clearBindings();
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(1, startTime);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(2, image);
        }
        stmt.bindLong(3, entity.getRoomId());
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(4, roomName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FutureBean entity) {
        stmt.clearBindings();
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(1, startTime);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(2, image);
        }
        stmt.bindLong(3, entity.getRoomId());
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(4, roomName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FutureBean readEntity(Cursor cursor, int offset) {
        FutureBean entity = new FutureBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // startTime
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // image
            cursor.getInt(offset + 2), // roomId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // roomName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FutureBean entity, int offset) {
        entity.setStartTime(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoomId(cursor.getInt(offset + 2));
        entity.setRoomName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FutureBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FutureBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(FutureBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
