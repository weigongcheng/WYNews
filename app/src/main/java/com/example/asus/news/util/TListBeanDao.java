package com.example.asus.news.util;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.asus.news.news.model.TListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TLIST_BEAN".
*/
public class TListBeanDao extends AbstractDao<TListBean, String> {

    public static final String TABLENAME = "TLIST_BEAN";

    /**
     * Properties of entity TListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Template = new Property(0, String.class, "template", false, "TEMPLATE");
        public final static Property Topicid = new Property(1, String.class, "topicid", false, "TOPICID");
        public final static Property HasCover = new Property(2, boolean.class, "hasCover", false, "HAS_COVER");
        public final static Property Alias = new Property(3, String.class, "alias", false, "ALIAS");
        public final static Property Subnum = new Property(4, String.class, "subnum", false, "SUBNUM");
        public final static Property RecommendOrder = new Property(5, int.class, "recommendOrder", false, "RECOMMEND_ORDER");
        public final static Property IsNew = new Property(6, int.class, "isNew", false, "IS_NEW");
        public final static Property Hashead = new Property(7, int.class, "hashead", false, "HASHEAD");
        public final static Property Img = new Property(8, String.class, "img", false, "IMG");
        public final static Property IsHot = new Property(9, int.class, "isHot", false, "IS_HOT");
        public final static Property HasIcon = new Property(10, boolean.class, "hasIcon", false, "HAS_ICON");
        public final static Property Cid = new Property(11, String.class, "cid", false, "CID");
        public final static Property Recommend = new Property(12, String.class, "recommend", false, "RECOMMEND");
        public final static Property HeadLine = new Property(13, boolean.class, "headLine", false, "HEAD_LINE");
        public final static Property HasAD = new Property(14, int.class, "hasAD", false, "HAS_AD");
        public final static Property Color = new Property(15, String.class, "color", false, "COLOR");
        public final static Property BannerOrder = new Property(16, int.class, "bannerOrder", false, "BANNER_ORDER");
        public final static Property Tname = new Property(17, String.class, "tname", false, "TNAME");
        public final static Property Ename = new Property(18, String.class, "ename", false, "ENAME");
        public final static Property ShowType = new Property(19, String.class, "showType", false, "SHOW_TYPE");
        public final static Property Special = new Property(20, int.class, "special", false, "SPECIAL");
        public final static Property Tid = new Property(21, String.class, "tid", true, "TID");
        public final static Property IsSelected = new Property(22, boolean.class, "IsSelected", false, "IS_SELECTED");
    }


    public TListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TLIST_BEAN\" (" + //
                "\"TEMPLATE\" TEXT," + // 0: template
                "\"TOPICID\" TEXT," + // 1: topicid
                "\"HAS_COVER\" INTEGER NOT NULL ," + // 2: hasCover
                "\"ALIAS\" TEXT," + // 3: alias
                "\"SUBNUM\" TEXT," + // 4: subnum
                "\"RECOMMEND_ORDER\" INTEGER NOT NULL ," + // 5: recommendOrder
                "\"IS_NEW\" INTEGER NOT NULL ," + // 6: isNew
                "\"HASHEAD\" INTEGER NOT NULL ," + // 7: hashead
                "\"IMG\" TEXT," + // 8: img
                "\"IS_HOT\" INTEGER NOT NULL ," + // 9: isHot
                "\"HAS_ICON\" INTEGER NOT NULL ," + // 10: hasIcon
                "\"CID\" TEXT," + // 11: cid
                "\"RECOMMEND\" TEXT," + // 12: recommend
                "\"HEAD_LINE\" INTEGER NOT NULL ," + // 13: headLine
                "\"HAS_AD\" INTEGER NOT NULL ," + // 14: hasAD
                "\"COLOR\" TEXT," + // 15: color
                "\"BANNER_ORDER\" INTEGER NOT NULL ," + // 16: bannerOrder
                "\"TNAME\" TEXT," + // 17: tname
                "\"ENAME\" TEXT," + // 18: ename
                "\"SHOW_TYPE\" TEXT," + // 19: showType
                "\"SPECIAL\" INTEGER NOT NULL ," + // 20: special
                "\"TID\" TEXT PRIMARY KEY NOT NULL ," + // 21: tid
                "\"IS_SELECTED\" INTEGER NOT NULL );"); // 22: IsSelected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TLIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TListBean entity) {
        stmt.clearBindings();
 
        String template = entity.getTemplate();
        if (template != null) {
            stmt.bindString(1, template);
        }
 
        String topicid = entity.getTopicid();
        if (topicid != null) {
            stmt.bindString(2, topicid);
        }
        stmt.bindLong(3, entity.getHasCover() ? 1L: 0L);
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
 
        String subnum = entity.getSubnum();
        if (subnum != null) {
            stmt.bindString(5, subnum);
        }
        stmt.bindLong(6, entity.getRecommendOrder());
        stmt.bindLong(7, entity.getIsNew());
        stmt.bindLong(8, entity.getHashead());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(9, img);
        }
        stmt.bindLong(10, entity.getIsHot());
        stmt.bindLong(11, entity.getHasIcon() ? 1L: 0L);
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(12, cid);
        }
 
        String recommend = entity.getRecommend();
        if (recommend != null) {
            stmt.bindString(13, recommend);
        }
        stmt.bindLong(14, entity.getHeadLine() ? 1L: 0L);
        stmt.bindLong(15, entity.getHasAD());
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(16, color);
        }
        stmt.bindLong(17, entity.getBannerOrder());
 
        String tname = entity.getTname();
        if (tname != null) {
            stmt.bindString(18, tname);
        }
 
        String ename = entity.getEname();
        if (ename != null) {
            stmt.bindString(19, ename);
        }
 
        String showType = entity.getShowType();
        if (showType != null) {
            stmt.bindString(20, showType);
        }
        stmt.bindLong(21, entity.getSpecial());
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(22, tid);
        }
        stmt.bindLong(23, entity.getIsSelected() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TListBean entity) {
        stmt.clearBindings();
 
        String template = entity.getTemplate();
        if (template != null) {
            stmt.bindString(1, template);
        }
 
        String topicid = entity.getTopicid();
        if (topicid != null) {
            stmt.bindString(2, topicid);
        }
        stmt.bindLong(3, entity.getHasCover() ? 1L: 0L);
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
 
        String subnum = entity.getSubnum();
        if (subnum != null) {
            stmt.bindString(5, subnum);
        }
        stmt.bindLong(6, entity.getRecommendOrder());
        stmt.bindLong(7, entity.getIsNew());
        stmt.bindLong(8, entity.getHashead());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(9, img);
        }
        stmt.bindLong(10, entity.getIsHot());
        stmt.bindLong(11, entity.getHasIcon() ? 1L: 0L);
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(12, cid);
        }
 
        String recommend = entity.getRecommend();
        if (recommend != null) {
            stmt.bindString(13, recommend);
        }
        stmt.bindLong(14, entity.getHeadLine() ? 1L: 0L);
        stmt.bindLong(15, entity.getHasAD());
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(16, color);
        }
        stmt.bindLong(17, entity.getBannerOrder());
 
        String tname = entity.getTname();
        if (tname != null) {
            stmt.bindString(18, tname);
        }
 
        String ename = entity.getEname();
        if (ename != null) {
            stmt.bindString(19, ename);
        }
 
        String showType = entity.getShowType();
        if (showType != null) {
            stmt.bindString(20, showType);
        }
        stmt.bindLong(21, entity.getSpecial());
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(22, tid);
        }
        stmt.bindLong(23, entity.getIsSelected() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21);
    }    

    @Override
    public TListBean readEntity(Cursor cursor, int offset) {
        TListBean entity = new TListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // template
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // topicid
            cursor.getShort(offset + 2) != 0, // hasCover
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // alias
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // subnum
            cursor.getInt(offset + 5), // recommendOrder
            cursor.getInt(offset + 6), // isNew
            cursor.getInt(offset + 7), // hashead
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // img
            cursor.getInt(offset + 9), // isHot
            cursor.getShort(offset + 10) != 0, // hasIcon
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // cid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // recommend
            cursor.getShort(offset + 13) != 0, // headLine
            cursor.getInt(offset + 14), // hasAD
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // color
            cursor.getInt(offset + 16), // bannerOrder
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // tname
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // ename
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // showType
            cursor.getInt(offset + 20), // special
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // tid
            cursor.getShort(offset + 22) != 0 // IsSelected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TListBean entity, int offset) {
        entity.setTemplate(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTopicid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHasCover(cursor.getShort(offset + 2) != 0);
        entity.setAlias(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSubnum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRecommendOrder(cursor.getInt(offset + 5));
        entity.setIsNew(cursor.getInt(offset + 6));
        entity.setHashead(cursor.getInt(offset + 7));
        entity.setImg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsHot(cursor.getInt(offset + 9));
        entity.setHasIcon(cursor.getShort(offset + 10) != 0);
        entity.setCid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRecommend(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHeadLine(cursor.getShort(offset + 13) != 0);
        entity.setHasAD(cursor.getInt(offset + 14));
        entity.setColor(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBannerOrder(cursor.getInt(offset + 16));
        entity.setTname(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setEname(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setShowType(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSpecial(cursor.getInt(offset + 20));
        entity.setTid(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIsSelected(cursor.getShort(offset + 22) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(TListBean entity, long rowId) {
        return entity.getTid();
    }
    
    @Override
    public String getKey(TListBean entity) {
        if(entity != null) {
            return entity.getTid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TListBean entity) {
        return entity.getTid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
